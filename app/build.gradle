import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.application'

android {

    Properties props = new Properties();    //定义属性
    props.load(new FileInputStream(file(rootProject.file("config.properties"))))    //加载自定义文件

    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.app.koreq.commlistview"
        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //为了解决如下错误
        //Error:Jack is required to support java 8 language features. Either enable Jack or remove sourceCompatibility JavaVersion.VERSION_1_8.
//        jackOptions {    //Jack工具链 替代javac
//            enabled true
//            //参考链接：https://developer.android.com/guide/platform/j8-jack.html
//        }

        // 增加res 属性 相当于定义在string.xml中的属性
        resValue "string", "current_time", getTime()    //String测试  正常
//        resValue "bool", "IS_DEBUG", 'true'     //bool测试 单引号 正常
//        resValue "bool", "IS_DEBUG", "true"     //bool测试 双引号 正常
//        resValue "bool", "IS_DEBUG", isDebug()     //bool测试 正常
        resValue "integer", "test_num_1", "12345"     //整型测试 正常
        resValue "integer", "test_num_2", getTestNum()     //整型测试 正常

        //gradle.properties文件中定义属性
        resValue "string", "test_string", project.test_string   //String测试  正常
        resValue "integer", "test_int", project.test_integer    //整型测试 正常
        resValue "bool", "test_bool", project.test_bool         //bool测试 正常

        // 先加载自定义的文件，然后使用该文件中的属性进行赋值
        resValue("integer", "host_env", props['host_env'])   //整型测试 正常
        resValue("bool", "is_debug", props['is_debug'])      //bool测试 正常
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //指定编译版本
    compileOptions {
//        targetCompatibility JavaVersion.VERSION_1_8   //支持 jack 编译的版本
//        sourceCompatibility JavaVersion.VERSION_1_8   //支持 jack 编译的版本
        targetCompatibility JavaVersion.VERSION_1_7
        sourceCompatibility JavaVersion.VERSION_1_7
    }
}

def isDebug() {
    return 'true'
}

def getTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss")
}

def getTestNum() {
    return "23456"
}

dependencies {

    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile project(':netlib')
    compile project(path: ':aop-lib')
    compile project(':qrcode')

    //    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.android.support:design:25.3.1'
    compile 'org.aspectj:aspectjrt:1.8.1'
    testCompile 'junit:junit:4.12'
}



final def log = project.logger
final def variants = project.android.applicationVariants

variants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")
        return;
    }

    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.8", //1.8是为了兼容java 8。请根据自己java的版本合理设置它 原值为：1.5
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]
        log.debug "ajc args: " + Arrays.toString(args)

        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler);
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                    log.warn message.message, message.thrown
                    break;
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}
